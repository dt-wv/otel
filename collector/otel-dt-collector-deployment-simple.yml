---
# required for k8sattributes processor
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector
rules:
- apiGroups: ["","apps"]
  resources: ["pods", "namespaces","replicasets"]
  verbs: ["get", "watch", "list"]
---
# required for k8sattributes processor
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
   name: otel-collector
subjects:
- kind: ServiceAccount
  name: otel-collector-collector
  namespace: otel-backend
roleRef:
   kind: ClusterRole
   name: otel-collector
   apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Secret
metadata:
  name: dynatrace-secrets
  namespace: otel-backend
type: Opaque
stringData:
  # replace the my-environment-id and my-token-value with the right values
  environment-id: "my-environment-id"
  api-token: "my-token-value"
---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel-collector
  namespace: otel-backend
spec:
  # using the Dynatrace supported otel-collector
  image: ghcr.io/dynatrace/dynatrace-otel-collector/dynatrace-otel-collector:latest
  # using daemonset for a collector on every k8s node to get the logs
  mode: daemonset # deployment, statefulset, daemonset, sidecar
  env:
    - name: environment_id
      valueFrom:
        secretKeyRef:
          name: dynatrace-secrets
          key: environment-id
    - name: API_TOKEN
      valueFrom:
        secretKeyRef:
           name: dynatrace-secrets
           key: api-token
    - name: MY_POD_IP
      valueFrom:
        fieldRef:
           fieldPath: status.podIP
  autoscaler:
    targetCPUUtilization: 90
    minReplicas: 1
    maxReplicas: 5
    
  config: |
    receivers:

      # Data sources: traces, metrics, logs
      otlp:
        protocols:
          grpc:
            endpoint: ${MY_POD_IP}:4317
          http:
            endpoint: ${MY_POD_IP}:4318
      
  
    processors:
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 25
      
      batch:
      
      transform:
        metric_statements:
          - context: metric
            statements:
              # Get count from the histogram. The new metric name will be <histogram_name>_count
              - extract_count_metric(true) where type == METRIC_DATA_TYPE_HISTOGRAM

              # Get sum from the histogram. The new metric name will be <histogram_name>_sum
              - extract_sum_metric(true) where type == METRIC_DATA_TYPE_HISTOGRAM
          - context: datapoint
            statements:
              # convert the <histogram_name>_sum metrics to gauges.
              - convert_sum_to_gauge() where IsMatch(metric.name, ".*_sum")

      filter/remove:
        error_mode: ignore
        metrics:
          metric:
            - 'type == METRIC_DATA_TYPE_HISTOGRAM'
            - 'IsMatch(name,"system.cpu.time")'
            - 'IsMatch(name,"system.disk.io")'
            - 'IsMatch(name,"system.disk.time")'
            - 'IsMatch(name,"system.disk.operations")'
            - 'IsMatch(name,"system.network.dropped_packets")'
            - 'IsMatch(name,"system.network.packets")'
            - 'IsMatch(name,"tomcat.global.received")'
            - 'IsMatch(name,"tomcat.sessions.rejected")'
            - 'IsMatch(name,"otelcol_http_server_request_size")'
            - 'IsMatch(name,"otelcol_exporter_sent_spans")'
            - 'IsMatch(name,"otelcol_receiver_refused_metric_points")'
            - 'IsMatch(name,"otelcol_processor_batch_timeout_trigger_send")'
            - 'IsMatch(name,"otelcol_http_client_request_size")'
                  
      # requires a clusterrole and clusterrolebinding -- see above
      k8sattributes:
        auth_type: "serviceAccount"
        passthrough: false
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.statefulset.name
            - k8s.daemonset.name
            - k8s.cronjob.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time
            - k8s.cluster.uid
          annotations:
            # extracts Keys & values of annotations matching regex `opentel.*` or `.*` for anything
            - key_regex: .* 
              from: pod
          labels:
            # extracts Keys & values of labels matching regex `opentel.*` or `.*` for anything
            - key_regex: .* 
              from: pod


    exporters:
      otlphttp/dynatrace:
         endpoint: "https://${environment_id}.live.dynatrace.com/api/v2/otlp"
         headers:
           Authorization: "Api-Token ${API_TOKEN}"


    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, batch, k8sattributes]
          exporters: [otlphttp/dynatrace]
        metrics:
          receivers: [prometheus,otlp]
          processors: [memory_limiter, batch, transform, filter/remove]
          exporters: [otlphttp/dynatrace]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, batch]
          exporters: [otlphttp/dynatrace]